import scrapy
import json
import csv
from scrapy.spiders import Spider
from scrapy.http import FormRequest
from scrapy.http import Request
from scrapy.selector import HtmlXPathSelector
from chainxy.items import ChainItem
import pdb
import unicodedata

class CountrykitchenrestaurantsSpider(scrapy.Spider):
    name = 'countrykitchenrestaurants'
    start_urls = ['http://www.countrykitchenrestaurants.com/location/']
    # you can set the user agent either in the settings or the spider

    headers = {
        "Accept":"*/*",
        "Accept-Encoding":"gzip, deflate",
        "Accept-Language":"en-GB,en-US;q=0.8,en;q=0.6",
        "Cache-Control":"no-cache",
        "Connection":"keep-alive",
        "Content-Length":"13500",
        "Content-Type":"application/x-www-form-urlencoded; charset=UTF-8",
        "Cookie":"__utmt=1; ASP.NET_SessionId=yscgjcl3vcxdkk3a1jsbzyen; __utma=104187999.1747365670.1494253057.1494306342.1494397540.4; __utmb=104187999.2.10.1494397540; __utmc=104187999; __utmz=104187999.1494253057.1.1.utmcsr=(direct)|utmccn=(direct)|utmcmd=(none)",
        "Host":"www.countrykitchenrestaurants.com",
        "Origin":"http://www.countrykitchenrestaurants.com",
        "Referer":"http://www.countrykitchenrestaurants.com/location/",
        "User-Agent":"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.81 Safari/537.36",
        "X-MicrosoftAjax":"Delta=true",
        "X-Requested-With":"XMLHttpRequest"
    }
    def parse(self, response):
        for state in response.xpath('//select[@name="ddlStateSelect"]/option'):
            url = "http://www.countrykitchenrestaurants.com/location/"
            state_value = state.xpath('./@value').extract_first()
            formdata = {
                "ScriptManager1":"upnStateSearchResults|btnSearch",
                "ddlStateSelect":state_value,
                "__EVENTTARGET":"",
                "__EVENTARGUMENT":"",
                "__VIEWSTATE":"",
                "__VIEWSTATEGENERATOR":"93D427D6",
                "__EVENTVALIDATION":"/wEdABXAAxfzhRiJ0EgaXsNDRHPaCU2PUQXtU+CYvH4wLOSM4NOSPQqHz2/I+xXk/tq+vq0Z5Glgrn9wO7s3T35i8bJdK3yAxE3b3uHf2QaRsHgq4KqgOksDnIQFDqPOUgJ4PuHHYmN0VLRx6yxisLqHxFV72xnbYPae7IZTr+tX1vIemTONRwA+qx+hJt7Gn074GEQ/BY8cTeJ/gYx59OficlWZszjAfEFqp9pSLp98iXPKYPhQkBgvpVoKrkYnUA0zYMYvbonzGNdqbwSXxCA7xNY5yv42ZFT/6FHxrdrU3FCGu1bFtPsM3jrQikRdW6dD3Aa2aUeInzRrKTCqA/3J53pf4ujM/pdq1ckwF3PBDZT3BTeYA2+lkM0JElb/A3lrsVcJf+S4L9bEwW0L8OS0pmlNfjQXQWZ/ySMjerM5hgpdzI7U3Vc0WZ+wxclqyPFfzmOiOmCnPp7hMCAo5idkGInB864phMiViF/4IrY/ts0CIg==",
                "__ASYNCPOST":"true",
                "btnSearch":"Search"            
            }
            yield FormRequest(url=url, formdata=formdata, headers=self.headers, callback=self.parse_store)

    def parse_store(self, response):
        stores = response.xpath('//table[@class="body_text"]//td')
        for store in stores:
            if self.validate(store.xpath('./strong/text()')) != "":
                item = ChainItem()
                item['store_name'] = ""
                item['store_number'] = ""
                addr = store.xpath('./text()').extract()
                item['address'] = addr[2].strip()
                item['address2'] = ""
                i = 0
                if "facebook.com" in addr[3] or "PO Box" in addr[3] or "Box" in addr[3] or "Inn on" in addr[3]:
                    i = 1
                item['city'] = addr[3 + i].strip().split(',')[0]
                item['state'] = addr[3 + i].strip().split(',')[-1].split()[0]
                item['zip_code'] = addr[3 + i].strip().split(',')[-1].split()[1]
                if item['state'] == "MB":
                    item['zip_code'] = " ".join(addr[3 + i].strip().split(',')[-1].split()[1:])
                try:
                    zip_code = int(item['zip_code'])
                    item['country'] = "United States"
                except:
                    item['country'] = "Canada"
                item['phone_number'] = addr[4 + i].strip().split(':')[-1].strip()
                item['latitude'] = ""
                item['longitude'] = ""
                item['store_hours'] = ""
                #item['store_type'] = info_json["@type"]
                item['other_fields'] = ""
                item['coming_soon'] = 0
                yield item

    def validate(self, xpath_obj):
        try:
            return xpath_obj.extract_first().strip().encode('utf8').replace('\xc3\xb4', 'o').replace("&#39", "'").replace('&amp;nbsp;', '').replace('&nbsp;', '')
        except:
            return ""