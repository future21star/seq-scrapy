import scrapy
import json
import csv
from scrapy.spiders import Spider
from scrapy.http import FormRequest
from scrapy.http import Request
from scrapy.selector import HtmlXPathSelector
from chainxy.items import ChainItem
import pdb

class MmfoodmarketSpider(scrapy.Spider):
	name = "mmfoodmarket"
	uid_list = []
	domain = "https://www.mmfoodmarket.com/en/"

	def __init__(self):
		place_file = open('citiesusca.json', 'rb')
		self.place_reader = json.load(place_file)

	def start_requests(self):
		for city in self.place_reader:
			info = self.place_reader[city]
			if info['country'] == 'Canada':
				request_url = "https://www.mmfoodmarket.com/en/store-locator"
				form_data = {
					'ctl12_TSSM' : 'Telerik.Sitefinity.Resources, Version=8.1.5800.0, Culture=neutral, PublicKeyToken=b28c218413bdf563:en:f7a2bcfd-9e00-4417-96fe-66024fe072ff:7a90d6a:83fa35c7;Telerik.Web.UI, Version=2015.2.623.40, Culture=neutral, PublicKeyToken=121fae78165ba3d4:en:158c5a8b-5278-48be-a59f-fbc1676fc61b:580b2269:eb8d8a8e',
					'__EVENTTARGET' : '',
					'__EVENTARGUMENT' : '',
					'__LASTFOCUS' : '',
					"__VIEWSTATE" : "",
					'__VIEWSTATEGENERATOR' : '6E96F86F',
					'__EVENTVALIDATION' : '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',
					'ctl00_CustomBreadcrumbs_ctl00_ctl00_Breadcrumb_ClientState' : '',
					'ctl00$ProductsSearch$T26E5E929063$txt_productSearch' : '',
					'ctl00$content$C002$hdnLat' : info['latitude'],
					'ctl00$content$C002$hdnLong' : info['longitude'],
					'ctl00$content$C002$txtPostalCode' : info['zip_code'],
					'ctl00$content$C002$btnPCSubmit' : 'Submit',
					'ctl00$content$C002$drpProvince' : '-1',
					'ctl00$content$C002$drpCity' : '-1'
				}
				request = FormRequest(url=request_url, formdata=form_data, callback=self.parse_store)
				request.meta['state'] = info['state']
				request.meta['zip_code'] = info['zip_code']
				request.meta['latitude'] = info['latitude']
				request.meta['longitude'] = info['longitude']
				yield request

	def parse_store(self, response):
		stores = response.xpath('//div[@class="data"]')
		for store in stores:
			item = ChainItem()
			item['store_number'] = store.xpath('./div[5]/a[1]/@href').extract_first().split('/')[1]
			hour_request = scrapy.Request(url=self.domain + store.xpath('./div[5]/a[1]/@href').extract_first(), callback=self.parseHours)			
			hour_request.meta['item'] = item
			yield hour_request

	def parseHours(self, response):
		item = response.meta['item']
		item['store_name'] = ""
		item['store_number'] = ""
		item['address'] = response.xpath('//div[@class="store-info store-details"]/p//text()').extract()[-3].strip()
		item['address2'] = ""
		item['phone_number'] = response.xpath('//div[@class="store-info store-details"]/p//text()').extract()[-1].strip()
		item['city'] = response.xpath('//div[@class="store-info store-details"]/p//text()').extract()[-2].strip().encode('utf8').replace('\xc2\xa0\n', '').split()[0][:-1]
		item['state'] = response.xpath('//div[@class="store-info store-details"]/p//text()').extract()[-2].strip().encode('utf8').replace('\xc2\xa0\n', '').split()[1]
		item['country'] = "Canada"
		item['latitude'] = ""
		item['longitude'] = ""
		#item['store_type'] = info_json["@type"]
		item['other_fields'] = ""
		item['coming_soon'] = 0
		if self.hasNumbers(response.xpath('//div[@class="store-info store-details"]/p//text()').extract()[-2].strip().encode('utf8').replace('\xc2\xa0\n', '').split()[-2]):
			item['zip_code'] = response.xpath('//div[@class="store-info store-details"]/p//text()').extract()[-2].strip().encode('utf8').replace('\xc2\xa0\n', '').split()[-2] + response.xpath('//div[@class="store-info store-details"]/p//text()').extract()[-2].strip().encode('utf8').replace('\xc2\xa0\n', '').split()[-1]
		else:
			item['zip_code'] = response.xpath('//div[@class="store-info store-details"]/p//text()').extract()[-2].strip().encode('utf8').replace('\xc2\xa0\n', '').split()[-1]			
		hours = response.xpath('//*[@id="content_C006_Col00"]/div[2]/table//tr')
		item['store_hours'] = ""
		for hour in hours:
			item['store_hours'] += hour.xpath('./td[1]/text()').extract_first().strip().replace('\n','').replace(' ','') + hour.xpath('./td[2]//text()').extract()[1].strip() + ";"
		if item['store_number'] != "" and item['store_number'] in self.uid_list:
			return
		self.uid_list.append(item['store_number'])
		yield item

	def validate(self, xpath_obj):
		try:
			return xpath_obj.extract_first().strip().encode('utf8').replace('\xc3\xb4', 'o').replace("&#39", "'").replace('&amp;nbsp;', '').replace('&nbsp;', '')
		except:
			return ""

	def hasNumbers(self, str):
		return any(char.isdigit() for char in str)
