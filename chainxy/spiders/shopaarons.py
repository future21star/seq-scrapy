import scrapy
import json
import csv
from scrapy.spiders import Spider
from scrapy.http import FormRequest
from scrapy.http import Request
from scrapy.selector import HtmlXPathSelector
from chainxy.items import ChainItem
import pdb
import unicodedata

class ShopaaronsSpider(scrapy.Spider):
		name = "shopaarons"
		uid_list = []
		start_urls = ['https://www.shopaarons.ca/storelocator.aspx']
		count = 0
		domain = "https://www.shopaarons.ca/"

		def parse(self, response):
			states = response.xpath('//area[contains(@onclick, "ctl00$PageContent$CanadaMap")]/@onclick').extract()
			for state in states:
				try:
					state_value = state.split(",'")[-1].split("'")[0]
					url = "https://www.shopaarons.ca/storelocator.aspx"
					form_data = {
						"__EVENTTARGET":"ctl00$PageContent$CanadaMap",
						"__EVENTARGUMENT":state_value,
						"__VIEWSTATE":"",
						"__VIEWSTATEGENERATOR":"E3BA0392",
						"__EVENTVALIDATION":"/wEWHgKBrNeHBAL+rdD5CwLuy6SVDwKczcKOBAL15rXvDQKR77fOAgL8/9m/DQLLhKTDCALKuZneCgLct8fTCgLhuOaaCQLguNqaCQLduOaaCQLcuOaaCQLcuP6aCQLcuJ6aCQLcuJqaCQLcuJKaCQLfuPaaCQLOuNKaCQLRuNqaCQLTuPqaCQLJuJ6aCQKA89LEDQKq2tTrDwKOsa34DwLF+cqiCwKRksXJDwK559iKAgLyn+QkiPRm/Rhy3FJaXz41j+uuUFjG2mI=",
						"ctl00$ctl22$SearchTerm":"Search Keyword or Item #",
						"ctl00$ctl23$SearchTermiPad":"Search",
						"ctl00$PageContent$txtSearchZip":"",
						"ctl00$PageContent$SelectState":"AB",
						"ctl00$PageContent$htxtState":"AB"
					}
					yield FormRequest(url=url, formdata=form_data, callback=self.parse_stores)
				except:
					pdb.set_trace()
					pass
		def parse_stores(self, response):
			self.count += len(response.xpath('//a[@class="StoreLocLink"]/@href').extract())
			print "----------------------------------------------------------"
			print self.count
			print "----------------------------------------------------------"
			for store_url in response.xpath('//a[@class="StoreLocLink"]/@href').extract():
				try:
					url = self.domain + store_url
					yield scrapy.Request(url=url, callback=self.parse_store)
				except:
					pdb.set_trace()
					pass
		def parse_store(self, response):
			try:
				item = ChainItem()
				item['store_number'] = ""
				item['store_name'] = self.validate(response.xpath('//h2[@itemprop="name"]/text()'))
				item['address'] = self.validate(response.xpath('//span[@itemprop="street-address"]/text()'))
				item['address2'] = ""
				item['city'] = self.validate(response.xpath('//span[@itemprop="locality"]/text()'))
				item['state'] = self.validate(response.xpath('//span[@itemprop="region"]/text()'))
				item['zip_code'] = self.validate(response.xpath('//span[@itemprop="postal-code"]/text()'))
				item['country'] = "Canada" 
				item['phone_number'] = self.validate(response.xpath('//span[@itemprop="tel"]/text()'))
				hours = response.xpath('//div[@class="weekdaystable"]/div')
				item['store_hours'] = ""
				for hour in hours:
					data = hour.xpath('./text()').extract()
					data = [a.strip() for a in data if a.strip() != ""]
					item['store_hours'] += hour.xpath('./span/text()').extract_first() + ":" + "".join(data) + ";"
				item['latitude'] = self.validate(response.xpath('//input[@id="ctl00_PageContent_GoogleMaplat"]/@value'))
				item['longitude'] = self.validate(response.xpath('//input[@id="ctl00_PageContent_GoogleMaplng"]/@value'))
				#item['store_type'] = info_json["@type"]
				item['coming_soon'] = 0
				item['other_fields'] = ""
				yield item	
			except:
				pdb.set_trace()
				pass
		def validate(self, xpath):
			try:
				return xpath.extract_first().strip()
			except:
				return ""
